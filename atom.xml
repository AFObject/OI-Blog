<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[OI Blog]]></title>
  <link href="oi.afobject.ml/atom.xml" rel="self"/>
  <link href="oi.afobject.ml/"/>
  <updated>2022-01-14T20:48:10+08:00</updated>
  <id>oi.afobject.ml/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[<tit>0xff 算法竞赛进阶指南</tit>]]></title>
    <link href="oi.afobject.ml/overview.html"/>
    <updated>2022-01-07T23:06:53+08:00</updated>
    <id>oi.afobject.ml/overview.html</id>
    <content type="html"><![CDATA[
<hr />
<ul>
<li><c>0x0101</c> 表示题目编号。根据书后索引编号或直接写题目来源。</li>
<li><e>Easy</e> 我能很快做出来的题目。<br />
大约对应红 ～ 黄，典型题目：NOIP 2021 A。</li>
<li><m>Medium</m> 我需要充足的思考才能做出来或者能轻易理解思路的题目。<br />
大约对应思维黄 ～ 下位蓝，典型题目：CSP-S 2021 A。</li>
<li><h>Hard</h> 我看题解都蚌埠住的那种。<br />
大约对应上位蓝到黑。</li>
</ul>
<hr />
<ul>
<li>0x00 基本算法</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[<sh0>0x00 基本算法</sh0>]]></title>
    <link href="oi.afobject.ml/0x00.html"/>
    <updated>2022-01-07T23:05:09+08:00</updated>
    <id>oi.afobject.ml/0x00.html</id>
    <content type="html"><![CDATA[
<ul>
<li>0x01 位运算</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[<sh1>0x01 位运算</sh1>]]></title>
    <link href="oi.afobject.ml/0x01.html"/>
    <updated>2022-01-08T11:01:10+08:00</updated>
    <id>oi.afobject.ml/0x01.html</id>
    <content type="html"><![CDATA[
<h2><a id="%E8%A1%A5%E7%A0%81" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>补码</h2>
<ul>
<li>对于 <code>unsigned int</code>：补码等于原码。</li>
<li>对于 <code>signed int</code>：正数部分补码等于原码，负数部分 \([-2^{31}, -1]\) 相当于 <code>unsigned int</code> \([2^{31}+1, 2^{32}]\)。即原来的<strong>负数的绝对值减去 1 后取反</strong>。<br />
\(-45 \to -(00101101)_2 \to \operatorname{rev}(00101101-1)_2 \to (11010011)_2\)。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0x011 位运算基础]]></title>
    <link href="oi.afobject.ml/0x011.html"/>
    <updated>2022-01-07T22:44:17+08:00</updated>
    <id>oi.afobject.ml/0x011.html</id>
    <content type="html"><![CDATA[
<h2><a id="%E5%BF%AB%E9%80%9F%E5%B9%82" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>快速幂</h2>
<p><tc><c>0x0101</c><e>Easy-</e><t>快速幂</t></tc></p>
<p>求 \(a^b \bmod p\) 的值。</p>
<h3><a id="%E7%AE%97%E6%B3%95" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>算法</h3>
<p>\(b\) 可以拆分为这样的二进制：\(b=\sum\limits_{i=0}^{n-1} k_i \times 2^i\)（\(k_i \in \{0, 1\}\)）。</p>
<p>因此 \(a^b = \prod\limits_{i=0}^{n-1} a^{k_i \times 2^{i}}\)。</p>
<p>可以看成递推：\(p_i=a^{2^i}\)，则 \(a^b = \prod\limits_{i=0}^{n-1} p_{i}^{k_i}\)，其中 \(p_{i}= p_{i-1}^2\)。</p>
<p>做的时候直接把数组免了。</p>
<h3><a id="%E5%AE%9E%E7%8E%B0" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>实现</h3>
<pre class="line-numbers"><code class="language-cpp">int pow(int a, int b, int p) {
	int ans = 1 % p;
	while (b) {
		if (b &amp; 1)
			ans = (ans * a) % p;
		a = (a * a) % p;
		b &gt;&gt;= 1;
	}
	return ans;
}
</code></pre>
<hr />
<h2><a id="raising-modulo-numbers" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>Raising Modulo Numbers</h2>
<p><tc><c>0x0102</c><e>Easy-</e><t>快速幂</t></tc></p>
<p>给你 \(N\) 组数，让你求 \(\sum a_i^{b_i} \bmod M\)（\(N, M \le 4.5 \times 10^4\)）。</p>
<h3><a id="%E7%AE%97%E6%B3%95" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>算法</h3>
<p>暴力。</p>
<h3><a id="%E5%AE%9E%E7%8E%B0" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>实现</h3>
<pre class="line-numbers"><code class="language-cpp">int n, p, a, b, T;
signed main() {
	T = read();
	while (T--) {
		p = read(), n = read();
		int ans = 0;
		while (n--) {
			a = read(), b = read();
			ans = (ans + pow(a, b, p)) % p;
		}
		printf(&quot;%lld\n&quot;, ans);
	}
}
</code></pre>
<hr />
<h2><a id="64%E4%BD%8D%E6%95%B4%E6%95%B0%E4%B9%98%E6%B3%95" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>64 位整数乘法</h2>
<p><tc><c>0x0103</c><e>Easy-</e><t>快速幂</t></tc></p>
<p>求 \(a \times b \bmod p\) 的值。\(1 \le a,b,p \le 10^{18}\)。</p>
<h3><a id="%E7%AE%97%E6%B3%95" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>算法</h3>
<p>除非用 <code>__int128</code>，否则必须要将 \(a,b\) 拆分成更小的数再合并求积。这时就可以用到位运算了。</p>
<p>和快速幂几乎完全一样，改几个符号而已。</p>
<h3><a id="%E5%AE%9E%E7%8E%B0" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>实现</h3>
<pre class="line-numbers"><code class="language-cpp">int mul(int a, int b, int p) {
	int ans = 0;
	while (b) {
		if (b &amp; 1)
			ans = (ans + a) % p;
		a = (a &lt;&lt; 1) % p;
		b &gt;&gt;= 1;
	}
	return ans;
}
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0x012 二进制状态压缩]]></title>
    <link href="oi.afobject.ml/0x012.html"/>
    <updated>2022-01-07T22:44:57+08:00</updated>
    <id>oi.afobject.ml/0x012.html</id>
    <content type="html"><![CDATA[
<h2><a id="%E6%9C%80%E7%9F%ADhamilton%E8%B7%AF%E5%BE%84" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>最短 Hamilton 路径</h2>
<p><tc><c>0x0104</c><m>Medium</m><t>状压</t><t>DP</t></tc></p>
<p>在一张点数小于等于 \(20\) 的带权无向图中找出一条从 \(0\) 到 \(n-1\) <strong>不重不漏地经过每一个点</strong>且<strong>边权和最短</strong>的路径。</p>
<h3><a id="%E7%AE%97%E6%B3%95" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>算法</h3>
<p>很容易想到用一个二进制数来表示已路过的点的状态（路径状态）。</p>
<p>令 \(f(s,i)\) 为路径状态为 \(s\)，当前点在 \(i\) 的最短路。然后转移即可。</p>
\[f(s,i) = \min_{s' \to s}\{f(s',k) + w(k,i)\}
\]
<p>注意细节：\(s'\) 能通向 \(s\) 需要满足 <strong>\(k\) 包含在 \(s'\) 中</strong>，即 \(k\) 包含在 \(s\) 中且 \(k \neq i\)。</p>
<h3><a id="%E5%AE%9E%E7%8E%B0" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>实现</h3>
<pre class="line-numbers"><code class="language-cpp">int n;
int w[21][21];
int dis[1 &lt;&lt; 21][21];

int main() {
    memset(dis, 0x3f, sizeof dis);
	dis[1][0] = 0;
	for (int s = 2; s &lt; (1 &lt;&lt; n); ++s) {
		for (int i = 0; i &lt; n; ++i) {
			if (!((s &gt;&gt; i) &amp; 1)) continue; // 要求 s 包含 i。
			for (int k = 0; k &lt; n; ++k) { // 选择上一个点。
				if ((s &gt;&gt; k) &amp; 1 &amp;&amp; k != i) // 要求 s 包含 k 且 k 不等于 i。
					dis[s][i] = std::min(dis[s][i], dis[s ^ (1 &lt;&lt; i)][k] + w[k][i]);
			}
		}
	}
	printf(&quot;%d\n&quot;, dis[(1 &lt;&lt; n) - 1][n - 1]);
	return 0;
}
</code></pre>
<hr />
<h2><a id="%E8%B5%B7%E5%BA%8A%E5%9B%B0%E9%9A%BE%E7%BB%BC%E5%90%88%E7%97%87" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>起床困难综合症</h2>
<p><tc><c>0x0105</c><c>NOI 2014</c><m>Medium</m><t>位运算</t><t>贪心</t></tc></p>
<p>\([0, m]\) 之间选择一个数，使得经过 \(n\) 次位运算后值最大，求最大值。\(m \le 10^9\)，\(n \le 10^5\)。</p>
<h3><a id="%E7%AE%97%E6%B3%95" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>算法</h3>
<p>很牛的一点：<strong>题目中这些操作在二进制中都不会产生进位。</strong></p>
<p>所以每一位分讨，结果能是 1 就是 1，原数能是 0 就是 0（因为要满足 \(\le m\) 的条件）。</p>
<p>即如果只有填 1 结果才能是 1，且当前还 \(\le m\) 的情况下，就填 1。否则一律填 0。</p>
<p>从高到低分位讨论。</p>
<h3><a id="%E5%AE%9E%E7%8E%B0" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>实现</h3>
<pre class="line-numbers"><code class="language-cpp">int n, m, arg[1000001];
std::string op[1000001];

bool calc(int k, bool val) {
	for (int i = 1; i &lt;= n; ++i) {
		if (op[i] == &quot;AND&quot;)
			val &amp;= (arg[i] &gt;&gt; k) &amp; 1;
		else if (op[i] == &quot;OR&quot;)
			val |= (arg[i] &gt;&gt; k) &amp; 1;
		else
			val ^= (arg[i] &gt;&gt; k) &amp; 1;
	}
	return val;
}

int main() {
	std::cin &gt;&gt; n &gt;&gt; m;
	for (int i = 1; i &lt;= n; ++i)
		std::cin &gt;&gt; op[i] &gt;&gt; arg[i];
		
	int sel = 0, ans = 0;
	for (int i = 30; i &gt;= 0; --i) {
		if (sel + (1 &lt;&lt; i) &lt;= m &amp;&amp;
			calc(i, 0) == 0 &amp;&amp; calc(i, 1) == 1)
			sel += (1 &lt;&lt; i), ans += (1 &lt;&lt; i);
		else if (calc(i, 0))
			ans += (1 &lt;&lt; i);
	}
	printf(&quot;%d\n&quot;, ans);
	return 0;
}
</code></pre>

]]></content>
  </entry>
  
</feed>
